generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}


datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}
 
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  music Music[]
  articles Articles[]
  workouts Workout[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Music {
  musicId            String          @id @default(cuid())
  musicName String
  musicLink String
  genre String
  createdAt DateTime @default(now())
  createdBy String?
  creator User? @relation(fields: [createdBy], references: [id])

}

model Articles {
  articleId            String          @id @default(cuid())
  articlesName String
  articlesLink String
  note String
  createdAt DateTime @default(now())
  createdBy String?
  creator User? @relation(fields: [createdBy], references: [id] )
}

model Exercises {
  exerciseId String  @id @default(cuid())
  exerciseName String
  muscleGroup String
  workoutDetails WorkoutDetails[]
}

model Workout {
  workoutId String @id @default(cuid())
  workoutNote String?
  createdAt DateTime @default(now())
  createdBy String?
  creator User? @relation(fields: [createdBy], references: [id])
  workoutDetails WorkoutDetails[]
}

model WorkoutDetails {
  workoutDetailsId String @id @default(cuid())
  workoutId String
  workout Workout @relation(fields: [workoutId], references: [workoutId])
  exerciseId String
  exercise Exercises @relation(fields: [exerciseId], references: [exerciseId])
  sets              Int
  repetitions       Int[]
  weights           Int[]

}